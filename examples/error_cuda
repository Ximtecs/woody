def predict_cuda(self, X, indices=None): 
    a = os.path.dirname(__file__)
    typePath = a + "/src/tree/include/"
    mod = SourceModule("""
    #include "types.h"
    #define TREE_ROOT_ID 0
    #define TREE_CHILD_ID_NOT_SET 0
    #define PREDICTION_TYPE_NORMAL 0
    #define PREDICTION_TYPE_LEAVES_IDS 1

    __global__ void cuda_query_tree(TREE tree, FLOAT_TYPE *Xtest, int dXtest,
                FLOAT_TYPE *predictions)
    {
        register TREE_NODE *node = tree.root;
        register FLOAT_TYPE *tpatt;

        register unsigned int i, node_id;
        i = threadIdx.x;                

        tpatt = Xtest + i * dXtest;
        node_id = TREE_ROOT_ID;

        while (node[node_id].left_id != TREE_CHILD_ID_NOT_SET) {
            if (tpatt[node[node_id].feature] <= node[node_id].thres_or_leaf) {
                node_id = node[node_id].left_id;
            } else {
                node_id = node[node_id].right_id;
            }
        }
        predictions[i] = node[node_id].thres_or_leaf;
    }
            """,include_dirs=[typePath])
    cuda_predict = mod.get_function("cuda_query_tree")

    tree = self.get_wrapped_tree(0)
    preds = np.ones((X.shape[0], self.n_estimators), dtype=self.numpy_dtype_float)
    cuda_predict(drv.In(tree), drv.In(X), drv.In(len(X)),drv.Out(preds),block=(X.shape[1],1,1), grid=(1,1))
    return preds

def get_leaves_ids(self, X, n_jobs=1, indices=None, verbose=0):
    
    if X.dtype != self.numpy_dtype_float:
        X = X.astype(self.numpy_dtype_float)

    if indices is None: 
        indices = np.empty((0, 0), dtype=np.int32)
        preds = np.zeros(X.shape[0] * self.n_estimators, dtype=self.numpy_dtype_float)
        self.wrapper.params.prediction_type = 1
        self.wrapper.params.verbosity_level = verbose
        self.wrapper.module.predict_extern(X, preds, indices, self.wrapper.params, self.wrapper.forest)
    else:

        indices = np.array(indices).astype(dtype=np.int32)
        if indices.ndim == 1:
            indices = indices.reshape((1, len(indices)))            
        
        preds = np.zeros(self.n_estimators * indices.shape[1], dtype=self.numpy_dtype_float)
        self.wrapper.params.prediction_type = 1
        self.wrapper.params.verbosity_level = verbose
        
        self.wrapper.module.predict_extern(X, preds, indices, self.wrapper.params, self.wrapper.forest)            
        
    return preds

---------------------------------------------------------------------------------------------------------
Traceback (most recent call last):
  File "example.py", line 35, in <module>
    ypreds_train = model.predict_cuda(Xtrain) 
  File "/home/ximtecs/woody/woody/models/forest/base.py", line 314, in predict_cuda
    cuda_predict(drv.In(tree), drv.In(X), drv.In(len(X)),drv.Out(preds),block=(X.shape[1],1,1), grid=(1,1))
  File "/home/ximtecs/woody/.venv/woody/local/lib/python2.7/site-packages/pycuda/driver.py", line 383, in function_call
    handlers, arg_buf = _build_arg_buf(args)
  File "/home/ximtecs/woody/.venv/woody/local/lib/python2.7/site-packages/pycuda/driver.py", line 142, in _build_arg_buf
    arg_data.append(int(arg.get_device_alloc()))
  File "/home/ximtecs/woody/.venv/woody/local/lib/python2.7/site-packages/pycuda/driver.py", line 76, in get_device_alloc
    raise TypeError("could not determine array length of '%s': unsupported array type or not an array" % type(self.array))
TypeError: could not determine array length of '<class 'woody.models.forest.wrapper_cpu_double.TREE'>': unsupported array type or not an array
